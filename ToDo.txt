This package should look like Unitful.jl but behave like DynamicQuantities.jl under the hood

Tasks:
1.  Build out unit parser and expression builders
2.  Build out RegistryTools 
3.  Build the first Registry with RegistryTools 
4.  Finish promotion schema if it's even needed, 
     -  May need it for AbstractUnits which favor AffineUnits 
     -  May be less needed for Quantities (which favor AbstractDimensions) 
        this package eagerly converts to SI
5.  Finish mathematical functions 
6.  Build basic tests
7.  Consider using DispatchDoctor


Design Decisions:
1.  Unit/Quantity outputs should be clean and parsable with the uparse/qparse functions
2.  All quantity operations (even affine units) eagerly convert to base dimensional units 
        Displaying quantities with units not having symbol will convert to SI to emphasize this fact
3.  Registry is a module containing a single dict for a registry (AffineUnits because they are the most general)
        Users can easily create their own registries with the RegistryTools module that exports everythign you need
4.  String macros ({x}"...") and parse macros ({x}parse("...")) need the following versions:
        q: produce a Quantity{Float64, Dimensions} (si quantity representation, general)
        us: produce a ScalarUnits{Dimensions} (scaled unit representation, scale-restrictive)
        u: produce an AffineUnits{Dimensions} (affine unit represntation, general)
5.  Macros and parsers ARE NOT EXPORTED BY DEFAULT
        Instead, use "using Dimensionful.Registry" to export them manually
        This prevents polluting namespaces, and allows users to export macros from their own registries
6.  "u" and "us" variants assign the expression as their symbol

7.  You can feed a dictionary to {x}parse(str, dict), to use custom unit registries
        The dict will have have elements of AffineUnits{D} where D is a dimension object
        Build an {x}expression(str, dict) as well for easily building string macros



Considerations:
N.  Consider commutative macro for promote_rule to prevent repetition
        https://discourse.julialang.org/t/techniques-for-defining-commutative-functions/113406/5
